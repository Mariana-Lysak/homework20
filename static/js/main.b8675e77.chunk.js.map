{"version":3,"sources":["components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","time","setTime","autostart","active","setActive","interval","useRef","useEffect","current","setInterval","step","onTick","clearInterval","line","minutes","Math","floor","seconds","clock","onClick","style","width","className","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAEaA,EAAQ,SAACC,GAElB,MAAwBC,mBAASD,EAAME,MAAvC,mBAAOA,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAASD,EAAMI,WAA3C,mBAAOC,EAAP,KAAeC,EAAf,KAEIC,EAAWC,mBAEfC,qBAAU,WAgBN,OAfAF,EAASG,QAAUC,aAAY,WACxBN,GAAUH,EAAO,GAChBC,EAASD,EAAOF,EAAMY,MACtBZ,EAAMa,OAAOX,IACPG,GAAmB,IAATH,GAChBC,EAAQH,EAAME,MACdI,GAAU,GACVQ,cAAcP,EAASG,UAIvBP,EAHOE,GAAmB,IAATH,EAGTA,EAFAF,EAAME,QAIN,IAAbF,EAAMY,MAED,WACAL,EAASG,SACTI,cAAcP,EAASG,YAGhC,CAACR,EAAMG,EAAQL,IAElB,IAkBMe,EAAI,UAAa,IAAPb,EAAaF,EAAME,KAAzB,KAGV,OACI,gCACI,oCAnBM,SAAAA,GACV,IAAIc,EAAUC,KAAKC,MAAMhB,EAAO,IAC5BiB,EAAUjB,EAAO,GASrB,OAPIc,EAAU,KACVA,EAAU,IAAMA,GAEjBG,EAAU,KACTA,EAAU,IAAMA,GAGd,GAAN,OAAUH,EAAV,YAAqBG,GAQVC,CAAMlB,GAAb,OACA,yBAAQmB,QAxBD,WACDf,GAAVD,IAuBI,cAA4BA,EAAS,OAAS,QAA9C,OACA,qBAAKiB,MAAO,CAACC,MAAOR,GAAOS,UAAU,aC5ClCC,MATf,WACE,OACE,sBAAKD,UAAU,MAAf,UACE,cAAC,EAAD,CAAOtB,KAAM,EAAGU,KAAM,EAAGR,WAAW,EAAOS,OAAQ,SAACX,GAAD,OAAUwB,QAAQC,IAAI,0FAAsBzB,MAC/F,cAAC,EAAD,CAAOA,KAAM,KAAMU,KAAM,EAAGR,WAAW,EAAMS,OAAQ,SAACX,GAAD,OAAUwB,QAAQC,IAAI,0FAAsBzB,UCIxF0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b8675e77.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nexport const Timer = (props) => {\n\n    const [time, setTime] = useState(props.time);\n    const [active, setActive] = useState(props.autostart);\n\n    let interval = useRef();\n\n    useEffect(() => {\n        interval.current = setInterval(() => {\n            if(active && time > 0) {\n                setTime( time - props.step);\n                props.onTick(time);\n            } else if(active && time === 0) {\n                setTime(props.time);\n                setActive(false)\n                clearInterval(interval.current);\n            } else if(!active && time === 0 ) {\n                setTime(props.time)\n            } else {\n                setTime(time)\n            }\n        }, props.step * 1000);\n\n        return (() => {\n            if (interval.current) {\n                clearInterval(interval.current);\n            }\n        })\n    }, [time, active, props]);\n\n    const toggle = () => {\n        active ?  setActive(false) : setActive(true);\n    };\n\n    const clock = time => {\n        let minutes = Math.floor(time / 60);\n        let seconds = time % 60;\n\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        if(seconds < 10) {\n            seconds = '0' + seconds;\n        }\n\n        return `${minutes}:${seconds}`;\n    }\n\n    const line = `${time * 100 / props.time}%`;\n\n\n    return(\n        <div>\n            <div> {clock(time)} </div>\n            <button onClick={toggle}> { active ? 'stop' : 'start'} </button>\n            <div style={{width: line}} className=\"line\"></div>\n        </div>\n    )\n}","\nimport './App.css';\nimport { Timer } from './components/Timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time={5} step={1} autostart={false} onTick={(time) => console.log(\"Залишилось часу: \" + time)}/>\n      <Timer time={3600} step={2} autostart={true} onTick={(time) => console.log(\"Залишилось часу: \" + time)}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}